import java.io.*;
import java.util.*;

// Part b: Student class for serialization
class Student implements Serializable {
    private static final long serialVersionUID = 1L; // for versioning
    int studentID;
    String name;
    double grade;

    public Student(int studentID, String name, double grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    @Override
    public String toString() {
        return "StudentID: " + studentID + ", Name: " + name + ", Grade: " + grade;
    }
}

// Part c: Employee class for file handling
class Employee implements Serializable {
    private static final long serialVersionUID = 1L;
    int id;
    String name;
    String designation;
    double salary;

    public Employee(int id, String name, String designation, double salary) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Designation: " + designation + ", Salary: " + salary;
    }
}

public class JavaProgramDemo {

    // Part a: Sum of integers using autoboxing/unboxing
    public static void sumOfIntegers() {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> numbers = new ArrayList<>();
        System.out.println("Enter integers separated by space:");
        String[] inputs = sc.nextLine().split(" ");

        int sum = 0;
        for (String s : inputs) {
            // Parse string to Integer (autoboxing happens here)
            Integer num = Integer.parseInt(s);
            numbers.add(num);

            // Unboxing happens automatically when adding to sum
            sum += num;
        }

        System.out.println("Numbers entered: " + numbers);
        System.out.println("Sum of numbers: " + sum);
    }

    // Part b: Serialization & Deserialization of Student
    public static void serializeDeserializeStudent() {
        Scanner sc = new Scanner(System.in);
        System.out.println("\n--- Student Serialization Demo ---");
        System.out.print("Enter Student ID: ");
        int id = Integer.parseInt(sc.nextLine());
        System.out.print("Enter Student Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Student Grade: ");
        double grade = Double.parseDouble(sc.nextLine());

        Student student = new Student(id, name, grade);

        // Serialize
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("student.ser"))) {
            oos.writeObject(student);
            System.out.println("Student object serialized successfully.");
        } catch (IOException e) {
            System.out.println("Serialization Error: " + e.getMessage());
        }

        // Deserialize
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("student.ser"))) {
            Student deserializedStudent = (Student) ois.readObject();
            System.out.println("Deserialized Student: " + deserializedStudent);
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Deserialization Error: " + e.getMessage());
        }
    }

    // Part c: Employee Management System using file handling
    public static void employeeManagementSystem() {
        Scanner sc = new Scanner(System.in);
        String fileName = "employees.dat";
        while (true) {
            System.out.println("\n--- Employee Management System ---");
            System.out.println("1. Add Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            int choice = Integer.parseInt(sc.nextLine());

            switch (choice) {
                case 1:
                    System.out.print("Enter Employee ID: ");
                    int id = Integer.parseInt(sc.nextLine());
                    System.out.print("Enter Employee Name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter Designation: ");
                    String desig = sc.nextLine();
                    System.out.print("Enter Salary: ");
                    double salary = Double.parseDouble(sc.nextLine());

                    Employee emp = new Employee(id, name, desig, salary);

                    // Append employee to file
                    try (FileOutputStream fos = new FileOutputStream(fileName, true);
                         AppendableObjectOutputStream oos = new AppendableObjectOutputStream(fos)) {
                        oos.writeObject(emp);
                        System.out.println("Employee added successfully.");
                    } catch (IOException e) {
                        System.out.println("Error writing to file: " + e.getMessage());
                    }
                    break;

                case 2:
                    // Read and display all employees
                    try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileName))) {
                        System.out.println("\n--- Employee Records ---");
                        while (true) {
                            Employee e = (Employee) ois.readObject();
                            System.out.println(e);
                        }
                    } catch (EOFException e) {
                        // End of file reached
                    } catch (FileNotFoundException e) {
                        System.out.println("No employee records found.");
                    } catch (IOException | ClassNotFoundException e) {
                        System.out.println("Error reading file: " + e.getMessage());
                    }
                    break;

                case 3:
                    System.out.println("Exiting Employee Management System...");
                    return;

                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    // Custom ObjectOutputStream to append objects without writing header each time
    static class AppendableObjectOutputStream extends ObjectOutputStream {
        public AppendableObjectOutputStream(OutputStream out) throws IOException {
            super(out);
        }

        @Override
        protected void writeStreamHeader() throws IOException {
            File f = new File("employees.dat");
            if (f.length() == 0) {
                super.writeStreamHeader();
            } else {
                reset();
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("=== Part a: Sum of Integers Using Autoboxing/Unboxing ===");
        sumOfIntegers();

        serializeDeserializeStudent();

        employeeManagementSystem();
    }
}
